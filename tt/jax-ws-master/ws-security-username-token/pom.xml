<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>name.javacode.webservices.jaxws</groupId>
		<artifactId>jax-ws</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>ws-security-username-token</artifactId>
	<packaging>war</packaging>

	<description>WS-Security username token service. Tested in Wildfly 8.2.0.Final.
    <![CDATA[
    1) Starting code-first, save the generated WSDL in WEB-INF and add the WSIT extensions as needed.
      Reference the location from 'wsdlLocation' attribute of the @WebService annotation on the endpoint. 
      Starting contract-first, put the WSDL in WEB-INF.      
      
    2) In this project, a password callback is configured. The password is retrieved for the username 
      in the request context. In this case, the password is simply hard-coded but it may also be retrieved 
      from a keystore.
      
    3) Create a jaxws-endpoint-config.xml file and put it in WEB-INF. Reference the location from 'configFile' 
      attribute of the @EndpointConfig annotation on the endpoint. This file will have reference to the password callback.
               
    4) Deploy the service by running 'mvn clean package wildfly:run -P wildfly'.
    
    5) Hit http://localhost:8080/ws-security-username-token/CalculatorUTService?wsdl from a browser 
      and verify that the policy is included in the generated WSDL.
      
    6) The following entry needs to be added to the MANIFEST.MF. The maven war plugin does that for a regular build.
        Dependencies: org.apache.ws.security
    ]]>
    
    References:
    https://docs.jboss.org/author/display/WFLY8/WS-Security
    http://cxf.apache.org/docs/ws-securitypolicy.html 
  </description>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<archive>
						<manifestEntries>
							<Dependencies>org.apache.ws.security</Dependencies>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<dependencies>
					<dependency>
						<groupId>name.javacode.maven</groupId>
						<artifactId>maven-enforcer-rules-engine</artifactId>
						<version>0.0.1-SNAPSHOT</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>bannedProfiles</id>
						<configuration>
							<rules>
								<bannedProfiles
									implementation="name.javacode.maven.enforcer.rule.BannedProfiles">
									<profiles>
										jetty
									</profiles>
								</bannedProfiles>
							</rules>
						</configuration>
						<goals>
							<goal>enforce</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>jax-ws-handlers</artifactId>
			<version>${project.version}</version>
			<scope>runtime</scope>
		</dependency>
		<!-- org.apache.cxf:cxf-rt-ws-security has many of the same classes and 
			some more but causes runtime class loading issues that'll take your sleep 
			away. You've been warned! -->
		<dependency>
			<groupId>org.apache.ws.security</groupId>
			<artifactId>wss4j</artifactId>
			<version>1.6.18</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.ws</groupId>
			<artifactId>jbossws-api</artifactId>
			<version>1.0.3.CR2</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

</project>