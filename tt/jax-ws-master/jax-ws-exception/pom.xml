<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>name.javacode.webservices.jaxws</groupId>
		<artifactId>jax-ws</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>jax-ws-exception</artifactId>
	<packaging>war</packaging>

	<name>jax-ws-exception</name>

	<description>
    If the service publishes a WSDL, it can throw service exceptions (ones mapped in the WSDL) 
    or unmapped exceptions (RuntimeException or it's subclass). Service exceptions are wrapped in a
    SOAPFaultException and the service exception becomes the detail. If the service does not publish a WSDL, 
    it should only throw RuntimeException or it's subclass because  it's clients will have no knowledge 
    of any checked exceptions even if it throws one. 
    It may also not throw any exception and just set the body of the response to a SOAPFault,
    but in IMHO, it's a good programming practice to throw exceptions explicitly 
    rather than leaving it up to the client to check for faults.
  
    On the client side, if the client is a dynamic proxy type, it will see service exceptions 
    in the form of the generated exception class and unmapped exceptions as a ProtocolException subclass, 
    which almost always is SOAPFaultException class. 
    If the client is a dispatch type, regardless of how the service is implemented, 
    it'll see the exception in the form of a ProtocolException subclass, which almost always is SOAPFaultException class. 
    
    <![CDATA[
      Run 'mvn clean package jetty:run -P jetty' from the basedir then run the main classes in the project.
      
      To start Jetty in debug mode, run 'mvn clean package jetty:run-forked -P jetty'.
    ]]>
  </description>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>jax-ws-handlers</artifactId>
			<version>${project.version}</version>
			<scope>runtime</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.jvnet.jax-ws-commons</groupId>
				<artifactId>jaxws-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>wsimport-jaxws-exception-client</id>
						<goals>
							<goal>wsimport</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<packageName>name.javacode.webservices.jaxws.exception.client.generated</packageName>
							<wsdlDirectory>src/main/resources/wsdl</wsdlDirectory>
							<wsdlFiles>
								<wsdlFile>calculator.wsdl</wsdlFile>
							</wsdlFiles>
							<!-- This determines @WebService.wsdlLocation and @WebServiceClient.wsdlLocation 
								value. -->
							<wsdlLocation>http://localhost:8080/jax-ws-exception/CalculatorService?wsdl</wsdlLocation>
							<!-- Turn off generated source compilation; Maven will do it anyway -->
							<xnocompile>true</xnocompile>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>