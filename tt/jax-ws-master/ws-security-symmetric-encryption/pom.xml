<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>name.javacode.webservices.jaxws</groupId>
		<artifactId>jax-ws</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>ws-security-symmetric-encryption</artifactId>
	<packaging>war</packaging>

	<description>Symmetric encryption service. Tested in Wildfly 8.2.0.Final.  
  <![CDATA[
    1) Starting code-first, save the generated WSDL in WEB-INF and add the WSIT extensions as needed.
      Reference the location from 'wsdlLocation' attribute of the @WebService annotation on the endpoint. 
      Starting contract-first, put the WSDL in WEB-INF.
      
    2) Create a public/private key pair in a new keystore/truststore file. Put it under src/main/resources/META-INF.
    
    keytool -genkeypair -alias calcsym-service-key -keyalg RSA -dname "CN=localhost,O=home,C=us" -validity 3650 
      -keypass password -keystore calcsym-service-store.jks -storepass password -storetype JKS

    This page provides useful information about the algorithm suites.
    https://access.redhat.com/site/documentation/en-US/JBoss_Fuse/6.0/html/Web_Services_Security_Guide/files/MsgProtect-SOAP-SpecifyAlgorithmSuite.html
    
    3) Export the public key certificate and move it to the client project. The client will need
      to import it as part of the deal.
      
      keytool -exportcert -v -alias calcsym-service-key -file calcsym-service.cer -keystore calcsym-service-store.jks 
        -storepass password -storetype JKS
      
    4) Create a jaxws-endpoint-config.xml file and put it in WEB-INF. Reference the location from 'configFile' 
      attribute of the @EndpointConfig annotation on the endpoint.
      
    5) Create a service.properties file to contain various WS-Security information. This file is referenced from the jaxws-endpoint-config.xml.
      
    6) Deploy the service by running 'mvn clean package wildfly:run -P wildfly'.
    
    7) Hit http://localhost:8080/ws-security-symmetric-encryption/CalculatorSymService?wsdl from a browser 
      and verify that the policy is included in the generated WSDL.
      
    8) The following entry needs to be added to the MANIFEST.MF. The maven war plugin does that for a regular build.
        Dependencies: org.apache.ws.security
    ]]>
    
    References:
    https://docs.jboss.org/author/display/WFLY8/WS-Security
    http://cxf.apache.org/docs/ws-securitypolicy.html
    </description>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<archive>
						<manifestEntries>
							<Dependencies>org.apache.ws.security</Dependencies>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<dependencies>
					<dependency>
						<groupId>name.javacode.maven</groupId>
						<artifactId>maven-enforcer-rules-engine</artifactId>
						<version>0.0.1-SNAPSHOT</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>bannedProfiles</id>
						<configuration>
							<rules>
								<bannedProfiles
									implementation="name.javacode.maven.enforcer.rule.BannedProfiles">
									<profiles>
										jetty
									</profiles>
								</bannedProfiles>
							</rules>
						</configuration>
						<goals>
							<goal>enforce</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>jax-ws-handlers</artifactId>
			<version>${project.version}</version>
			<scope>runtime</scope>
		</dependency>
		<!-- org.apache.cxf:cxf-rt-ws-security has many of the same classes and 
			some more but causes runtime class loading issues that'll take your sleep 
			away. You've been warned! -->
		<dependency>
			<groupId>org.apache.ws.security</groupId>
			<artifactId>wss4j</artifactId>
			<version>1.6.18</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.ws</groupId>
			<artifactId>jbossws-api</artifactId>
			<version>1.0.3.CR2</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>
</project>