
package fi.vm.kapa.xml.rova.api.authorization;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * WSDL-file for RoVa Authorization service
 *         
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "Rova_Authorization_Service", targetNamespace = "http://xml.vrk.fi/ws/Rova/Authorization", wsdlLocation = "/wsdl/authorization.wsdl")
public class RovaAuthorizationService_Service
    extends Service
{

    private final static URL ROVAAUTHORIZATIONSERVICE_WSDL_LOCATION;
    private final static WebServiceException ROVAAUTHORIZATIONSERVICE_EXCEPTION;
    private final static QName ROVAAUTHORIZATIONSERVICE_QNAME = new QName("http://xml.vrk.fi/ws/Rova/Authorization", "Rova_Authorization_Service");

    static {
        ROVAAUTHORIZATIONSERVICE_WSDL_LOCATION = fi.vm.kapa.xml.rova.api.authorization.RovaAuthorizationService_Service.class.getResource("/wsdl/authorization.wsdl");
        WebServiceException e = null;
        if (ROVAAUTHORIZATIONSERVICE_WSDL_LOCATION == null) {
            e = new WebServiceException("Cannot find '/wsdl/authorization.wsdl' wsdl. Place the resource correctly in the classpath.");
        }
        ROVAAUTHORIZATIONSERVICE_EXCEPTION = e;
    }

    public RovaAuthorizationService_Service() {
        super(__getWsdlLocation(), ROVAAUTHORIZATIONSERVICE_QNAME);
    }

    public RovaAuthorizationService_Service(WebServiceFeature... features) {
        super(__getWsdlLocation(), ROVAAUTHORIZATIONSERVICE_QNAME, features);
    }

    public RovaAuthorizationService_Service(URL wsdlLocation) {
        super(wsdlLocation, ROVAAUTHORIZATIONSERVICE_QNAME);
    }

    public RovaAuthorizationService_Service(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, ROVAAUTHORIZATIONSERVICE_QNAME, features);
    }

    public RovaAuthorizationService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RovaAuthorizationService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns RovaAuthorizationPortType
     */
    @WebEndpoint(name = "rovaAuthorizationPort")
    public RovaAuthorizationPortType getRovaAuthorizationPort() {
        return super.getPort(new QName("http://xml.vrk.fi/ws/Rova/Authorization", "rovaAuthorizationPort"), RovaAuthorizationPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RovaAuthorizationPortType
     */
    @WebEndpoint(name = "rovaAuthorizationPort")
    public RovaAuthorizationPortType getRovaAuthorizationPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://xml.vrk.fi/ws/Rova/Authorization", "rovaAuthorizationPort"), RovaAuthorizationPortType.class, features);
    }

    private static URL __getWsdlLocation() {
        if (ROVAAUTHORIZATIONSERVICE_EXCEPTION!= null) {
            throw ROVAAUTHORIZATIONSERVICE_EXCEPTION;
        }
        return ROVAAUTHORIZATIONSERVICE_WSDL_LOCATION;
    }

}
