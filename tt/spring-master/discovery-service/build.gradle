buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:${project['spring.boot.version']}",
                "com.bmuschko:gradle-docker-plugin:${project['plugin.docker.version']}"
        )
    }
}

apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'java'
apply plugin: 'com.bmuschko.docker-remote-api'

apply from: "${project['gradle-common.url']}"

group = 'name.javacode.javaee'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()

    maven {
        url "http://repo.spring.io/milestone"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${project['spring.cloud.parent.version']}"
        mavenBom "org.springframework.boot:spring-boot-starter-parent:${project['spring.boot.version']}"
    }

    dependencies {
        "org.springframework:spring-webmvc:${project['spring.version']}"
        "org.springframework.boot:spring-boot:${project['spring.boot.version']}"
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.cloud:spring-cloud-starter')
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.cloud:spring-cloud-starter-eureka-server')
}

springBoot {
    mainClass = project['main-class']
}

bootRun {
    def additionalProps = ['HTTP_PORT', 'DISCOVERY_HOST', 'spring.profiles.active']
            .collectEntries { [(it as String): System.properties[it]] }
            .findAll { it.value }

    systemProperties = System.env + additionalProps
}

docker {
    if (System.env.DOCKER_HOST) {
        url = "${System.env.DOCKER_HOST}".replace("tcp", "https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = file(System.env.DOCKER_CERT_PATH)
        }
    } else {
        url = 'unix:///var/run/docker.sock'
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task buildDockerImage(type: DockerBuildImage, dependsOn: 'bootRepackage') {
    inputDir = projectDir
    tag = project['docker-tag']
}

defaultTasks 'clean', 'buildDockerImage'
