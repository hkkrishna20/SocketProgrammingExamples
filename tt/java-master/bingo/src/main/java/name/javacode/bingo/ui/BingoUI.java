package name.javacode.bingo.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;

import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

import name.javacode.bingo.businesslogic.BingoNumberCaller;
import name.javacode.bingo.businesslogic.NoMoreBingoNumbersException;

/**
 * The user interface. It has 2 tabs, one for calling out the Bingo numbers,
 * other for displaying which numbers have been called so far in the game
 * 
 * @author Author
 */
public class BingoUI extends javax.swing.JFrame {

	private static final long serialVersionUID = -7507453689678317637L;

	/**
	 * Creates new form BingoUI
	 */
	public BingoUI() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		tabbedPane = new javax.swing.JTabbedPane();
		numberCallerPanel = new javax.swing.JPanel();
		bingoNumberScreen = new javax.swing.JTextField();
		callBingoNumber = new javax.swing.JButton();
		numbersCalledPanel = new javax.swing.JPanel();
		scrollPane = new javax.swing.JScrollPane();
		numbersCalledTable = new javax.swing.JTable(
				new javax.swing.table.DefaultTableModel(
						BingoNumberCaller.BINGO_NUMBER_POOL, new String[] {
								"B", "I", "N", "G", "O" }) {
					private static final long serialVersionUID = -1409088135320691031L;
					@SuppressWarnings("rawtypes")
					Class[] types = new Class[] { java.lang.String.class,
							java.lang.String.class, java.lang.String.class,
							java.lang.String.class, java.lang.String.class };
					boolean[] canEdit = new boolean[] { false, false, false,
							false, false };

					@SuppressWarnings("rawtypes")
					public Class getColumnClass(int columnIndex) {
						return types[columnIndex];
					}

					public boolean isCellEditable(int rowIndex, int columnIndex) {
						return canEdit[columnIndex];
					}
				});

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Bingo");
		setName("bingoFrame"); // NOI18N

		bingoNumberScreen.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
		bingoNumberScreen.setHorizontalAlignment(javax.swing.JTextField.CENTER);

		callBingoNumber.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
		callBingoNumber.setText("CALL");
		callBingoNumber.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				callBingoNumberActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout numberCallerPanelLayout = new javax.swing.GroupLayout(
				numberCallerPanel);
		numberCallerPanel.setLayout(numberCallerPanelLayout);
		numberCallerPanelLayout
				.setHorizontalGroup(numberCallerPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								numberCallerPanelLayout
										.createSequentialGroup()
										.addGap(153, 153, 153)
										.addGroup(
												numberCallerPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addComponent(
																callBingoNumber,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																432,
																Short.MAX_VALUE)
														.addComponent(
																bingoNumberScreen))
										.addContainerGap(162, Short.MAX_VALUE)));
		numberCallerPanelLayout.setVerticalGroup(numberCallerPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						numberCallerPanelLayout
								.createSequentialGroup()
								.addGap(27, 27, 27)
								.addComponent(bingoNumberScreen,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										198,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(35, 35, 35)
								.addComponent(callBingoNumber,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										121,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(31, Short.MAX_VALUE)));

		tabbedPane.addTab("Number Caller", numberCallerPanel);

		CustomRenderer customRenderer = this.new CustomRenderer();
		customRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		customRenderer.setVerticalAlignment(DefaultTableCellRenderer.CENTER);
		numbersCalledTable.setDefaultRenderer(String.class, customRenderer);
		numbersCalledTable.setEnabled(false);
		numbersCalledTable.setFillsViewportHeight(true);
		numbersCalledTable.setOpaque(true);
		numbersCalledTable.setRowHeight(22);
		numbersCalledTable.setRowSelectionAllowed(false);
		numbersCalledTable
				.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		numbersCalledTable.getTableHeader().setReorderingAllowed(false);
		numbersCalledTable.getTableHeader().setDefaultRenderer(customRenderer);
		scrollPane.setViewportView(numbersCalledTable);

		javax.swing.GroupLayout numbersCalledPanelLayout = new javax.swing.GroupLayout(
				numbersCalledPanel);
		numbersCalledPanel.setLayout(numbersCalledPanelLayout);
		numbersCalledPanelLayout
				.setHorizontalGroup(numbersCalledPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								numbersCalledPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												scrollPane,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												727, Short.MAX_VALUE)
										.addContainerGap()));
		numbersCalledPanelLayout
				.setVerticalGroup(numbersCalledPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								numbersCalledPanelLayout
										.createSequentialGroup()
										.addComponent(
												scrollPane,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												401, Short.MAX_VALUE)
										.addContainerGap()));

		tabbedPane.addTab("Numbers Called", numbersCalledPanel);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				tabbedPane));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				tabbedPane));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void callBingoNumberActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_callBingoNumberActionPerformed
		String bingoNumber = null;
		try {
			bingoNumber = caller.callBingoNumber();
		} catch (NoMoreBingoNumbersException ex) {
			/* If all Bingo numbers have been called, show an error */
			final Font font = bingoNumberScreen.getFont();
			final Font errorFont = new Font(font.getFontName(),
					font.getStyle(), 20);
			bingoNumberScreen.setFont(errorFont);
			bingoNumberScreen.setForeground(Color.red);
			bingoNumber = ex.getMessage();
		}

		bingoNumberScreen.setText(bingoNumber);
	}// GEN-LAST:event_callBingoNumberActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(BingoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(BingoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(BingoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(BingoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				BingoUI gui = new BingoUI();
				/* Position the frame in the center of the screen */
				gui.setLocationRelativeTo(null);
				gui.setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField bingoNumberScreen;
	private javax.swing.JButton callBingoNumber;
	private javax.swing.JPanel numberCallerPanel;
	private javax.swing.JPanel numbersCalledPanel;
	private javax.swing.JTable numbersCalledTable;
	private javax.swing.JScrollPane scrollPane;
	private javax.swing.JTabbedPane tabbedPane;
	// End of variables declaration//GEN-END:variables
	private BingoNumberCaller caller = new BingoNumberCaller();

	/**
	 * Handles formatting of the table header and the cells
	 */
	private class CustomRenderer extends DefaultTableCellRenderer {

		private static final long serialVersionUID = -2825471347891022626L;

		private final Font headerFont = new Font(this.getFont().getFontName(),
				Font.BOLD, this.getFont().getSize());

		@Override
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row,
				int column) {
			Component c = super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);

			/* If row = -1, it is a header row. Set header font. */
			if (row == -1) {
				c.setFont(headerFont);
				c.setBackground(null);
			} /*
			 * If the Bingo number in this cell has been called, highlight the
			 * cell in yellow
			 */else if (caller.isCalled(value.toString())) {
				c.setBackground(Color.yellow);
			} else {
				c.setBackground(null);
			}

			return c;
		}
	}
}
