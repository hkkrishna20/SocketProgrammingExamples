import java.util.regex.Matcher

subprojects {
    afterEvaluate {
        def moduleName = project.name

        compileJava {
            doFirst {
                options.compilerArgs = ["--module-path", configurations.compileClasspath.asPath]
                classpath = files()
            }
        }

        compileTestJava {
            doFirst {
                options.compilerArgs = [
                        // JUnit5 is not modularized yet, but they specify Automatic-Module-Name in the JAR manifests
                        "--add-reads", "$moduleName=org.junit.jupiter.api",
                        "--module-path", classpath.asPath,
                        "--add-modules", "org.junit.jupiter.api",
                        "--patch-module", "$moduleName=${files(sourceSets.test.java.srcDirs).asPath}"
                ]
                classpath = files()
            }
        }

        test {
            doFirst {
                jvmArgs = [
                        "--module-path", classpath.asPath,
                        "--add-modules", "ALL-MODULE-PATH",
                        "--patch-module", "$moduleName=${sourceSets.test.java.outputDir.absolutePath}",
                        "--add-exports", "$moduleName/$moduleName=org.junit.platform.commons"
                ]
                classpath = files()
            }
        }
    }
}

project(":native:com.greetings") {
    run {
        doFirst {
            jvmArgs = [
                    "--module-path", classpath.asPath,
                    "--module", mainClassName
            ]
            classpath = files()
        }
    }
    startScripts {
        doFirst {
            defaultJvmOpts = [
                    "--module-path", "APP_HOME_LIB",
                    "--module", mainClassName
            ]
            classpath = files()
        }

        ["$applicationName": '$APP_HOME/lib', "${applicationName}.bat": '%APP_HOME%\\lib']
                .collectEntries { k, v -> [new File(outputDir, k), v] }
                .forEach { execFile, lib ->
            doLast {
                execFile.text = execFile.text.replaceFirst("APP_HOME_LIB", Matcher.quoteReplacement("$lib"))
            }
        }
    }
}
